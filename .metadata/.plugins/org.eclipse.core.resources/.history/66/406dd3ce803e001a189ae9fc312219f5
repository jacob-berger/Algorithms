
public class BinaryTree {

	private class Node {

		public Node left, right;
		public int data;

		Node(int data) {
			this.data = data;
			left = right = null;
		}
	}

	Node root;

	public BinaryTree() {
		root = null;
	}

	public Node insert(int toInsert) {
		return insert(root, toInsert);
	}

	private Node insert(Node root, int toInsert) {
		if (root == null) {
			root = new Node(toInsert);
		} else {
			if (root.data < toInsert) {
				root.left = insert(root.left, toInsert);
			} else {
				root.right = insert(root.right, toInsert);
			}
		}

		return root;
	}

	public void inOrderTraversal() {
		inOrderTraversal(root);
	}

	private void inOrderTraversal(Node root) {
		if (root == null) return;

		inOrderTraversal(root.left);

		System.out.println(root.data);

		inOrderTraversal(root.right);
	}

	public void postOrderTraversal() {
		postOrderTraversal(root);
	}

	private void postOrderTraversal(Node root) {
		if (root == null) return;
		
		postOrderTraversal(root.left);
		
		postOrderTraversal(root.right);
		
		System.out.println(root.data);
	}
	
	public static BinaryTree buildTree(Object inOrderSequence[], Object postOrderSequence[]) {
		
	}

}
